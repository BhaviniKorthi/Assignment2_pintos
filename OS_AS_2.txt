		     +--------------------------+
       	       	     |		CS 301		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Zeeshan Snehil Bhagat  <zeeshan.snehil@iitgn.ac.in>
Balu Karthik Ram           <balu.karthik@iitgn.ac.in>
Bhavini Korthi                 <bhavini.korthi@iitgn.ac.in>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

      No struct is declared or changed in this phase.
      
     In process.c:

struct argument_addr
{
  struct list_elem list_elem;
  uint32_t addr;
};


 The purpose of “struct argument_addr” is used for inserting argument address into list.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?


    Implementation of Argument Passing:
  
      1. The original "process_execute()" reads the file name from command with arguments. 
          So, First we need to split the file name with arguments. Thus, to split the command 
          line string, we use strtok_r() function.


      2. When we create a new thread, the real filename will be used as the thread name.
          And the arguments will be passed to function start_process(), load() and
          setup_stack().

      3. The crucial part of this task lies in setup_stack() function. When initializing
           the page, the arguments and commands are pushed into the stack.


    Arrangement for the elements of argv[] to be in the right order:
 
          We check the strings from last to first, with the command being the last string and the 
          last argument being the first. For example, in a string ‘run echo x’, the first element would be ‘x’, and ‘run’ would be
	 the last argument.


   How do you avoid overflowing the stack page?

         Overflowing will be recognised as a page fault exception in our design. When overflowing occurs, exit(-1) will execute.



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

      Here, the argument is filename.
      According to the Pintos documentation, strtok() uses static global buffer which stores 
      the remaining string waiting to be tokenized, so in a threaded program such as a 
      Pintos, it is unsafe to use. 
      Strtok_r() would use another argument save_ptr, which is an internally defined buffer. 
      So, it is safe to use, which is why Pintos implements strtok_r.



>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.


          1. The Unix way of separation allow the system to check the filename and arguments 
               are valid or not.
          2. The kernel could schedule the argument tokenizing on the Unix operating system 
              as if it were just another thread. This means that if a high priority thread was ready
              to run, the kernel could pause the shell's argument parsing, and schedule the 
              higher priority thread to run.This implies that new threads would have no impact 
              on priority scheduling.
          3. The Unix way of separation saves kernel cost.



			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


  In thread.h:

struct thread parent;              →Which thread creates this one. 
    
    struct list children;               →Threads that this one creates. 
    struct list_elem child_elem;        → List element for list children. 
    int cl_status;              → Load status of its child
    int ce_status;              → Exit status of its child
    
    struct list open_fd;               → Fds the thread opens
    struct file file;                  → Executable file of this thread. 
    
    struct semaphore p_wait;       → Determine whether thread should wait.


This struct is used to insert argument address into list



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

     Each file will be allocated to a unique descriptor, represented as a number. 
     When a file is opened using the open system call, it is added to the list of open files for the current process and given a unique file descriptor.
     File descriptors are therefore unique within a single process only. 
     Additionally, When a file is closed, its file descriptor is "freed," allowing the system to utilise it again later for another file. 
     If the same file is opened and kept open repeatedly, each time time it gets a new file descriptor.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

      The read and write system calls are used to read and write user data from the kernel, respectively. 
      Both require a file descriptor, a buffer pointer, and a parameter indicating the buffer's size. 
      All the parameters are checked for safe memory accesses. 
      The system call-executing process is terminated if something goes wrong.

      The code then decides upon checking the file descriptor if reading/writing operation is supposed to be from/to standard input, standard output or a file.
      If the process tries to read from STDOUT or write to STDIN, which is an error, it gets terminated.

      The descriptor of the thread will hold the lock when the file was being written or read. 
      When the reading or writing operating stopped, the lock will be released.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

      The least number of inspections is 1, the greatest possible number is 2. The operation is the same for a system call that only copies 2 bytes of data.

      There can be room for improvement on these numbers becauseIf the page size is substantially larger than it, numerous segments may fit inside without needing to be loaded into separate pages.
      For example, if the page size was 2 bytes and the segment size (on file) was 1, then instead of loading each segment into its own page and zeroing the other byte, they could
      share the same page. This would result in half the number of inspections of the page table.



>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

     When the process_wait is called, we run through the list of child of the processes to check for the matching thread ID. 
     If the struct with matching thread ID is found then the semaphore in the child struct undergoes sema_down and wait for the thread to finish. 
     Here the sema_up is executed if the running of the child thread stops. In the p_wait, the semaphore is immediately upped to avoid waiting incase if the parent tries to wait again on the thread. 
     The return value is temporarily stored  as the exit status of the child. And for the future calls, it is set to -1. 

     The semaphore is upped after the termination of the process, and this cause the parent thread to block waiting. 
     The child struct will be freed in either of the two cases: 1.  parent thread terminated and 2. when child finishes waiting.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

    A system call get the arguments from the stack and check its validity and none of the resources like buffers and locks are allotted to it bafore its validation. 
    If it doesnt encounter an error value or failure, it continues the execution. 
    The process exits through kill_process or thread_exit whenever it encounters bad memory access or malloc fails.

    For example, if the pointer points to address not lying in the user memory, 
    the function is_valid_ptr() in syscall.c is used to check for it and declares it invalid.



     

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

    The child_status is used to denote the status of the child thread and updated whenever the child thread changes. 
    The child_status is set to LOADING when the thread is executed. 
    If the thread execution is successful  then the thread ID is returned or else if the status if FAILED it returns -1 as the return value.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

     Case 1: When P calls wait(c) before C exits, then the P will be waiting for the C until it gets signalled by C (calling sema_down while exiting).

     Case 2: When P calls wait(c) after C exits, then P will not be waiting because C is removed from Children list of P.

     Case 3: When P terminates without waiting, then C will lose control and not be able to signal to its parent.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

       We had chosen to implement access to user memory from the kernel in this way because it is easier to control validate arguments and status. 
        It is also faster.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

     Advantages: The simplicity is the main advantage and the process can have any number of files open as it requires.

     Disadvantages: Consumes extra space and might be costly.


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

      No change is made
